if (args.Length != 2)
{
    ShowHelp();
    return -1;
}

foreach (var file in Directory.EnumerateFiles(args[0], "*.feature", SearchOption.AllDirectories))
{
    Console.WriteLine(file);
    GenerateMarkdownFor(file, args[1], args[0]);
}

return 0;

static void ShowHelp()
{
    var message = """
        usage: gherkin-to-markdown features-root-folder generation-folder
        """;
    Console.WriteLine(message);
}

static void CloseCodeSection(StreamWriter writer, ref bool sectionCodeStarted)
{
    writer.WriteLine("\t```");
    writer.WriteLine();
    sectionCodeStarted = false;
}

static void StartSection(StreamWriter writer, string description, ref bool sectionCodeStarted)
{
    writer.WriteLine($"???+ {description}");
    writer.WriteLine();
    writer.WriteLine("\t```gherkin");
    sectionCodeStarted = true;
}

static void GenerateMarkdownFor(string filePath, string generationFolder, string searchFolder)
{
    var featureRegexp = GherkinPattern.Feature();
    var background = GherkinPattern.Background();
    var scenarioRegexp = GherkinPattern.Scenario();
    var givenRegexp = GherkinPattern.Given();
    var whenRegexp = GherkinPattern.When();
    var thenRegexp = GherkinPattern.Then();
    var examplesRegexp = GherkinPattern.Examples();
    var tagsRegexp = GherkinPattern.Tags();

    var parsingState = ParsingState.None;
    var scenarioSection = false;

    Directory.CreateDirectory(generationFolder);
    var outpuFileName = $"{filePath.Replace(searchFolder, string.Empty).Replace("/", "__").Replace("\\", "__")}.md";
    Console.WriteLine($"Processing {filePath} to {Path.Combine(generationFolder, outpuFileName)}");

    using var input = File.OpenRead(filePath);
    using var reader = new StreamReader(input);
    using var output = File.Open(Path.Combine(generationFolder, outpuFileName), FileMode.Create);
    using var writer = new StreamWriter(output);
    string? line = null;
    var sectionCodeStarted = false;
    writer.WriteLine("<!-- Generated by gherkin-to-markdown tool -->");
    writer.WriteLine();
    while ((line = reader.ReadLine()) != null)
    {
        if (featureRegexp.IsMatch(line))
        {
            writer.WriteLine($"## {line}");
            writer.WriteLine();
            continue;
        }

        if (background.IsMatch(line))
        {
            StartSection(writer, "quote \"Background\"", ref sectionCodeStarted);
            parsingState = ParsingState.Background;
            continue;
        }

        if (scenarioRegexp.IsMatch(line))
        {
            if (sectionCodeStarted)
            {
                CloseCodeSection(writer, ref sectionCodeStarted);
                parsingState = ParsingState.None;
            }

            writer.WriteLine($"### {line}");
            writer.WriteLine();
            scenarioSection = true;
            continue;
        }

        if (tagsRegexp.IsMatch(line))
        {
            continue;
        }

        if (!scenarioSection)
        {
            writer.WriteLine(line);
            continue;
        }

        if (givenRegexp.IsMatch(line))
        {
            if (parsingState == ParsingState.None)
            {
                StartSection(writer, "success \"Given\"", ref sectionCodeStarted);
                parsingState = ParsingState.Given;
            }

            writer.WriteLine(line);
            continue;
        }

        if (whenRegexp.IsMatch(line))
        {
            if (sectionCodeStarted && parsingState != ParsingState.When)
            {
                CloseCodeSection(writer, ref sectionCodeStarted);
            }

            if (parsingState != ParsingState.When)
            {
                StartSection(writer, "success \"When\"", ref sectionCodeStarted);
                parsingState = ParsingState.When;
            }

            writer.WriteLine(line);
            continue;
        }

        if (thenRegexp.IsMatch(line))
        {
            if (sectionCodeStarted && parsingState != ParsingState.Then)
            {
                CloseCodeSection(writer, ref sectionCodeStarted);
            }

            if (parsingState != ParsingState.Then)
            {
                StartSection(writer, "success \"Then\"", ref sectionCodeStarted);
                parsingState = ParsingState.Then;
            }

            writer.WriteLine(line);
            continue;
        }

        if (examplesRegexp.IsMatch(line))
        {
            if (sectionCodeStarted && parsingState != ParsingState.Examples)
            {
                CloseCodeSection(writer, ref sectionCodeStarted);
            }

            if (parsingState != ParsingState.Examples)
            {
                StartSection(writer, "example \"Examples:\"", ref sectionCodeStarted);
                parsingState = ParsingState.Examples;
                continue;
            }

            writer.WriteLine(line);
            continue;
        }

        writer.WriteLine(line);
    }

    if (sectionCodeStarted)
    {
        CloseCodeSection(writer, ref sectionCodeStarted);
    }
}
